syntax = "proto3";

package raft;

message Peer {
  string Id = 1;                 // Peer unique id
  repeated string Addresses = 2; // peer ip address list
};

// Cluster the peers collection
message Cluster {
  // Peers
  repeated Peer peers = 1;
  // the cluster leader heartbeat timeout ticks
  uint64 heartbeatTimeout = 2;
  // If a follower receives no communication over a period of time called the
  // election timeout, then it assumes there is no vi- able leader and begins an
  // election to choose a new leader
  uint64 electionTimeout = 3;
}

enum Status {
  Leader = 0;
  Follower = 1;
  Candidate = 2;
}

// Receiver implementation:
// 1. Reply false if term < currentTerm (§5.1)
// 2. If votedFor is null or candidateId, and candidate’s log is at
//    least as up-to-date as receiver’s log, grant vote (§5.2, §5.4)
message RequestVote {
  uint64 term = 1;         // candidate’s term
  string candidateId = 2;  // andidate requesting vote
  uint64 lastLogIndex = 3; // index of candidate’s last log entry
  uint64 lastLogTerm = 4;  // term of candidate’s last log entry
}

message ResponseVote {
  uint64 term = 1;      // currentTerm, for candidate to update itself
  bool voteGranted = 2; // true means candidate received vote
}
// Receiver implementation:
// 1. Reply false if term < currentTerm (§5.1)
// 2. Reply false if log doesn’t contain an entry at prevLogIndex
//    whose term matches prevLogTerm (§5.3)
// 3. If an existing entry conflicts with a new one (same index
//    but different terms), delete the existing entry and all that
//    follow it (§5.3)
// 4. Append any new entries not already in the log
// 5. If leaderCommit > commitIndex, set commitIndex =
//    min(leaderCommit, index of last new entry)
message RequestAppendEntries {
  uint64 term = 1;         // leader’s term
  string leaderId = 2;     // so follower can redirect clients
  uint64 prevLogIndex = 3; // index of log entry immediately preceding new ones
  uint64 prevLogTerm = 4;  // term of prevLogIndex entry
  repeated bytes entries = 5; // log entries to store (empty for heartbeat; may
                              // send more than one for efficiency)
  uint64 leaderCommit = 6;    // leader’s commitIndex
}

message Entry {

  enum Type {
    normal = 0;
    changeCluster = 1;
  }

  uint64 index = 1; // index of candidate’s last log entry
  uint64 term = 2;  // term of candidate’s last log entry
  Type type = 3;    // entry type
  bytes data = 4;   // entry data
}

message ResponseAppendEntries {
  uint64 term = 1;  // currentTerm, for leader to update itself
  bool success = 2; // true if follower contained entry matching prevLogIndex
                    // and prevLogTerm
}
// Invoked by leader to send chunks of a snapshot to a follower. Leaders always
// send chunks in order.
// Receiver implementation:
// 1. Reply immediately if term < currentTerm
// 2. Create new snapshot file if first chunk (offset is 0)
// 3. Write data into snapshot file at given offset
// 4. Reply and wait for more data chunks if done is false
// 5. Save snapshot file, discard any existing or partial snapshot
//    with a smaller index
// 6. If existing log entry has same index and term as snapshot’s
//    last included entry, retain log entries following it and reply
// 7. Discard the entire log
// 8. Reset state machine using snapshot contents (and load
//    snapshot’s cluster configuration)
message RequestInstallSnapshot {
  uint64 term = 1;              // leader’s term
  string leaderId = 2;          // so follower can redirect clients
  uint64 lastIncludedIndex = 3; // the snapshot replaces all entries up through
                                // and including this index
  uint64 lastIncludedTerm = 4;  // term of lastIncludedIndex
  uint64 offset = 5;            // byte offset
                     // where chunk is positioned in the snapshot file
  bytes data = 6; // raw bytes of the snapshot chunk, starting at offset
  bool done = 7;  // true if this is the last chunk
}

message ResponseInstallSnapshot {}

service RaftStateMachine {
  rpc Vote(RequestVote) returns (ResponseVote);
  rpc AppendEntries(RequestAppendEntries) returns (ResponseAppendEntries);
  rpc InstallSnapshot(RequestInstallSnapshot) returns (ResponseInstallSnapshot);
}

message RequestExec {
  bytes data = 1; // entry data
}

message ResponseExec {
  string leader = 1; // redirect if leader != ''
}

message ResponseCluster {
  string leader = 1; // redirect if leader != ''
}

service Node {
  rpc Exec(RequestExec) returns (ResponseExec);
  rpc NewCluster(Cluster) returns (ResponseCluster);
}