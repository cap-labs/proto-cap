syntax = "proto3";

package cap;

option go_package = 'github.com/cap-labs/go-cap;cap';

message Message {
  string from = 1;   /// message from node
  string to = 2;     /// message send to
  bytes content = 3; /// message content
}

message ConsensusRequest { bytes content = 1; }

message ConsensusResponse {
  oneof content {
    Message sendMessage = 1;           // message send to node
    ApplicationRequest appRequest = 2; // application request
  }
}

message ApplicationRequest { bytes content = 1; }

message ApplicationResponse { StateSetRequest stateSet = 1; }

message StateSet {
  bytes key = 2;   // State set key word
  bytes value = 3; // State set value
}

message StateSetRequest {
  string state = 1;               // State to set
  repeated StateSet batchSet = 2; // State set batch
  uint32 maxSize = 3;             // State max size
}

message StateSetResponse {
  uint32 currentSize = 1; // State current size after set value
}

message StateGetRequest {
  repeated string keys = 1; // State get by keys
}

message StateGetResponse {
  repeated bytes values = 1; // State get values
  uint32 currentSize = 2;    // State current size
}

message PeerSetRequest {
  repeated string urls = 1; // peer set
}

message PeerSetResponse {}

/// The Application service
service Application {
  rpc Handle(ApplicationRequest) returns (ApplicationResponse);
}

/// The consensus engine api
service Consensus { rpc Handle(ConsensusRequest) returns (ConsensusResponse); }

/// The network service
service Networking {
  rpc Handle(stream Message) returns (stream Message);
  /// Update networking peer set
  rpc PeerSet(PeerSetRequest) returns (PeerSetResponse);
}

/// Storage service
service Storage {
  rpc StateSet(StateSetRequest) returns (StateSetResponse);
  rpc StateGet(StateGetRequest) returns (StateGetResponse);
}