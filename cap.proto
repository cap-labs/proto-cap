syntax = "proto3";

package cap;

option go_package = 'github.com/cap-labs/go-cap;cap';

/// Transport packet object
message Packet {
  string from = 1; // Packet from peer id
  string to = 2;   // Packet to peer id
  bytes data = 3;  // Packet data field
}

/// Transport service
service Transport {
  /// handle transport send/recv packet
  rpc handle(stream Packet) returns (stream Packet);
}

message PutPeerRequest {
  repeated string addrs = 1; // peers addr
}

message PutPeerResponse {}

message GetPeerRequest {
  string peers = 1; // peer id array
}

message GetPeerResponse {
  string addr = 1; // peer addr
}

service PeerStore {
  /// set peers
  rpc put(PutPeerRequest) returns (PutPeerResponse);
  /// get peers
  rpc get(GetPeerRequest) returns (GetPeerResponse);
}

message ExecRequest {
  bytes data = 1; //
}

message ExecResponse {}

service App {
  /// exec
  rpc exec(ExecRequest) returns (ExecResponse);
}

/// RPC data packet
message RPCPacket { bytes data = 1; }

service RPC {
  /// dispatch rpc packet
  rpc dispatch(RPCPacket) returns (RPCPacket);
}

/// Put state request message
message PutStateRequest {
  bytes state = 1;           /// state name
  uint64 capacity = 2;       /// advise state maximum storage capacity in bytes
  repeated bytes keys = 3;   /// Put value associate key
  repeated bytes values = 4; /// Put value data
}

/// Put state response message
message PutStateResponse {
  bytes state = 1;    /// state name
  uint64 size = 2;    /// state current storage size in bytes
  uint64 written = 3; /// written data in bytes, zero if out of capacity
                      /// indicate in PutStateRequest
}

/// batch put state request
message BatchPutStateRequest {
  repeated PutStateRequest batch = 1; /// request array
}

/// batch put state response
message BatchPutStateResponse {
  repeated PutStateResponse batch = 1; ///  response array
}

message GetStateRequest {
  bytes state = 1;         /// state name
  repeated bytes keys = 3; /// get value associate keys
}

message GetStateResponse {
  bytes state = 1;           /// state name
  uint64 size = 2;           /// state current storage size in bytes
  repeated bytes values = 4; /// get values data
}

/// batch put state request
message BatchGetStateRequest {
  repeated GetStateRequest batch = 1; /// request array
}

/// batch put state response
message BatchGetStateResponse {
  repeated GetStateResponse batch = 1; ///  response array
}

/// State persistence service
service State {
  rpc put(PutStateRequest) returns (PutStateResponse); //
  rpc batchPut(BatchPutStateRequest) returns (BatchPutStateResponse);
  rpc get(GetStateRequest) returns (GetStateResponse); //
  rpc batchGet(BatchGetStateRequest) returns (BatchGetStateResponse);
}